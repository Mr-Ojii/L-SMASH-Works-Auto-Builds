name: Build L-SMASH Works

on:
  push:
    branches:
      - msvc
  workflow_dispatch:
  # schedule:
  #   - cron: '0 0 * * 0'

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:

  build:
    env:
      CFLAGS: -O2
      CXXFLAGS: -O2
    runs-on: windows-latest
    strategy:
      matrix:
        lsw_config:
          - { author: Mr-Ojii, ffmpeg_version: "7.1", ffmpeg_patch: "", intel: "vpl", ffmpeg_extra_flags: ""}
        l-smash_author: [Mr-Ojii, vimeo]
        cpu_config:
          - { cpu: i686, arch: x86, user_arch: x86, sys: mingw32, vpx_target: x86-win32-gcc }
          - { cpu: x86_64, arch: x86_64, user_arch: x64, sys: mingw64, vpx_target: x86_64-win64-gcc }
    
    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - uses: ilammy/msvc-dev-cmd@v1
      with:
        arch: ${{ matrix.cpu_config.user_arch }}

    - uses: msys2/setup-msys2@v2
      with:
        update: true
        msystem: ${{ matrix.cpu_config.sys }}
        path-type: minimal
        install: >-
          base-devel
          git
          autotools
          autoconf
          cmake
          meson
          nasm
          yasm
          ninja
          pkgconf
          mingw-w64-${{ matrix.cpu_config.cpu }}-toolchain
          mingw-w64-${{ matrix.cpu_config.cpu }}-cmake
          mingw-w64-${{ matrix.cpu_config.cpu }}-meson

    # cherry-pickをする際に必要
    - name: Set git config
      shell: msys2 {0}
      run: |
        git config --global user.name Mr-Ojii
        git config --global user.email okaschan@gmail.com

    # ここから依存ライブラリのインストール
    - name: Install zlib
      id: zlib-rev
      shell: msys2 {0}
      run: |
        cd ${HOME}
        git clone https://github.com/madler/zlib.git --depth 1
        cd zlib
        cmake -B build -DCMAKE_BUILD_TYPE=Release -DCMAKE_INSTALL_PREFIX=${HOME}/lsw
        cmake --build build --config Release -j$(nproc)
        cmake --install build --prefix=${HOME}/lsw
        
        REVCOUNT=`git rev-list --count HEAD`
        echo "REV_LIST_COUNT=${REVCOUNT}" >> $GITHUB_OUTPUT
        SHA=`git rev-parse HEAD`
        echo "REV_SHA=${SHA}" >> $GITHUB_OUTPUT

    - name: Install Game Music Emu
      id: game-music-emu-rev
      shell: msys2 {0}
      run: |
        cd ${HOME}
        git clone https://github.com/libgme/game-music-emu.git --depth 1
        cd game-music-emu
        
        # SharedとStaticの2回、ビルドとインストールを行う
        # Shared (FFmpegはSharedをビルドしないければエラーとなる)
        cmake -S . -B build -DCMAKE_BUILD_TYPE=Release -DCMAKE_INSTALL_PREFIX=${HOME}/lsw -DENABLE_UBSAN=OFF -DBUILD_SHARED_LIBS=ON
        cmake --build build --config Release -j $(nproc)
        cmake --install build --prefix ${HOME}/lsw
        
        rm -rf build
        
        # Static (LSWはStaticをビルドしなければエラーとなる)
        cmake -S . -B build -DCMAKE_BUILD_TYPE=Release -DCMAKE_INSTALL_PREFIX=${HOME}/lsw -DENABLE_UBSAN=OFF -DBUILD_SHARED_LIBS=OFF
        cmake --build build --config Release -j $(nproc)
        cmake --install build --prefix ${HOME}/lsw
        
        REVCOUNT=`git rev-list --count HEAD`
        echo "REV_LIST_COUNT=${REVCOUNT}" >> $GITHUB_OUTPUT
        SHA=`git rev-parse HEAD`
        echo "REV_SHA=${SHA}" >> $GITHUB_OUTPUT

    - name: Install libvpx
      id: libvpx-rev
      shell: msys2 {0}
      run: |
        cd ${HOME}
        git clone https://github.com/webmproject/libvpx.git --depth 1
        mkdir libvpx/builds && cd libvpx/builds
        ../configure --target=${{ matrix.cpu_config.vpx_target }} --enable-vp9-highbitdepth --disable-docs --disable-tools --disable-examples --disable-webm-io --disable-vp8-encoder --disable-vp9-encoder --prefix=${HOME}/lsw
        make -j$(nproc)
        make install -j$(nproc)
        
        REVCOUNT=`git rev-list --count HEAD`
        echo "REV_LIST_COUNT=${REVCOUNT}" >> $GITHUB_OUTPUT
        SHA=`git rev-parse HEAD`
        echo "REV_SHA=${SHA}" >> $GITHUB_OUTPUT
        
    - name: Install dav1d
      id: dav1d-rev
      shell: msys2 {0}
      run: |
        cd ${HOME}
        git clone https://code.videolan.org/videolan/dav1d.git --depth 1
        cd dav1d
        meson setup --buildtype release --default-library=static -Denable_tests=false --prefix=${HOME}/lsw build
        ninja -C build
        ninja install -C build
        
        REVCOUNT=`git rev-list --count HEAD`
        echo "REV_LIST_COUNT=${REVCOUNT}" >> $GITHUB_OUTPUT
        SHA=`git rev-parse HEAD`
        echo "REV_SHA=${SHA}" >> $GITHUB_OUTPUT
    
        
    - name: Install nv-codec-headers
      id: nv-codec-headers-rev
      shell: msys2 {0}
      run: |
        cd ${HOME}
        git clone https://github.com/FFmpeg/nv-codec-headers.git --depth 1
        cd nv-codec-headers
        make install -j$(nproc)
        
        REVCOUNT=`git rev-list --count HEAD`
        echo "REV_LIST_COUNT=${REVCOUNT}" >> $GITHUB_OUTPUT
        SHA=`git rev-parse HEAD`
        echo "REV_SHA=${SHA}" >> $GITHUB_OUTPUT
        
    - name: Install mfx_dispatch
      if: ${{ matrix.lsw_config.intel == 'mfx' }}
      id: mfx_dispatch-rev
      shell: msys2 {0}
      run: |
        cd ${HOME}
        git clone https://github.com/lu-zero/mfx_dispatch.git --depth 1
        cd mfx_dispatch
        autoreconf -i
        ./configure --prefix=${HOME}/lsw
        make -j$(nproc)
        make install -j$(nproc)
        
        REVCOUNT=`git rev-list --count HEAD`
        echo "REV_LIST_COUNT=${REVCOUNT}" >> $GITHUB_OUTPUT
        SHA=`git rev-parse HEAD`
        echo "REV_SHA=${SHA}" >> $GITHUB_OUTPUT

    - name: Install libvpl
      if: ${{ matrix.lsw_config.intel == 'vpl' }}
      id: libvpl-rev
      shell: msys2 {0}
      run: |
        cd ${HOME}
        git clone https://github.com/intel/libvpl.git --depth 1
        cd libvpl
        cmake -B build -G Ninja -DCMAKE_BUILD_TYPE=Release -DBUILD_EXPERIMENTAL=OFF -DBUILD_SHARED_LIBS=OFF -DCXX_LIB=-lstdc++ -DCMAKE_INSTALL_PREFIX="${HOME}/lsw" .
        cmake --build build --config Release -j$(nproc)
        cmake --install build --prefix=${HOME}/lsw
        # なぜかx86ディレクトリ内に展開されるため、一階層上に移動する
        if [ "${{ matrix.cpu_config.arch }}" == "x86" ]; then
          cp -r ${HOME}/lsw/lib/x86/* ${HOME}/lsw/lib/
          rm -rf ${HOME}/lsw/lib/x86
          sed -i -e 's#${pcfiledir}/..#${pcfiledir}#g' ${HOME}/lsw/lib/pkgconfig/vpl.pc
        fi

        REVCOUNT=`git rev-list --count HEAD`
        echo "REV_LIST_COUNT=${REVCOUNT}" >> $GITHUB_OUTPUT
        SHA=`git rev-parse HEAD`
        echo "REV_SHA=${SHA}" >> $GITHUB_OUTPUT
      
    - name: Install FFmpeg
      shell: msys2 {0}
      run: |
        cd ${HOME}
        git clone https://github.com/FFmpeg/FFmpeg.git -b release/${{ matrix.lsw_config.ffmpeg_version }}
        cd FFmpeg

        # 文字が1文字以上存在すれば実行される
        if [ "${{ matrix.lsw_config.ffmpeg_patch }}" ]; then
          git cherry-pick 07bcedc232feeb9e30336624f4e9977d47ac43bc
        fi
        
        PKG_CONFIG_PATH=${HOME}/lsw/lib/pkgconfig ./configure --enable-version3 --disable-hwaccels --disable-encoders --disable-avisynth --disable-doc --disable-network --disable-programs --disable-outdevs --disable-indevs --disable-avfilter --disable-debug --disable-muxers --enable-avcodec --enable-avformat --enable-swresample --enable-swscale --extra-libs="-lpthread" --target-os=mingw32 --arch=${{ matrix.cpu_config.arch }} --prefix=${HOME}/lsw --enable-libdav1d --enable-libvpx ${{ matrix.lsw_config.ffmpeg_extra_flags }}
        # --enable-libgme --enable-lib${{ matrix.lsw_config.intel }}
        make -j$(nproc)
        make install -j$(nproc)
  
    - name: Install obuparse
      id: obuparse-rev
      shell: msys2 {0}
      run: |
        cd ${HOME}
        git clone https://github.com/dwbuiten/obuparse.git --depth 1
        cd obuparse
        gcc -O2 -c obuparse.c
        ar r libobuparse.a obuparse.o
        install obuparse.h ${HOME}/lsw/include
        install libobuparse.a ${HOME}/lsw/lib
        
        REVCOUNT=`git rev-list --count HEAD`
        echo "REV_LIST_COUNT=${REVCOUNT}" >> $GITHUB_OUTPUT
        SHA=`git rev-parse HEAD`
        echo "REV_SHA=${SHA}" >> $GITHUB_OUTPUT
        
    - name: Install L-SMASH
      id: l-smash-rev
      shell: msys2 {0}
      run: |
        cd ${HOME}
        git clone https://github.com/${{ matrix.l-smash_author }}/l-smash.git
        cd l-smash
        ./configure --extra-cflags=-I${HOME}/lsw/include --extra-ldflags=-L${HOME}/lsw/lib --prefix=${HOME}/lsw
        make lib -j$(nproc)
        make install-lib -j$(nproc)
        
        REVCOUNT=`git rev-list --count HEAD`
        echo "REV_LIST_COUNT=${REVCOUNT}" >> $GITHUB_OUTPUT
        SHA=`git rev-parse HEAD`
        echo "REV_SHA=${SHA}" >> $GITHUB_OUTPUT
        

    - name: Clone L-SMASH Works
      id: l-smash-works-rev
      shell: msys2 {0}
      run: |
        cd ${HOME}
        git clone https://github.com/${{ matrix.lsw_config.author }}/L-SMASH-Works.git
        
        cd L-SMASH-Works
        REVCOUNT=`git rev-list --count HEAD`
        echo "REV_LIST_COUNT=${REVCOUNT}" >> $GITHUB_OUTPUT
        SHA=`git rev-parse HEAD`
        echo "REV_SHA=${SHA}" >> $GITHUB_OUTPUT

    # とりあえず、ここまででAviUtl用のビルドに必要な依存ライブラリをインストールは完了しているため、ビルド確認用にここにおく
    - name: Build L-SMASH Works(AviUtl)
      env: 
        MSYS2_PATH_TYPE: inherit
      shell: msys2 {0}
      run: |
        cd ${HOME}/L-SMASH-Works/AviUtl
        PKG_CONFIG_PATH=${HOME}/lsw/lib/pkgconfig ./configure --extra-cflags=-I/usr/local/include --extra-ldflags="-L/usr/local/lib -static-libgcc -static-libstdc++ -static" --extra-libs="-lpthread"
        make -j$(nproc)


    # 次にVapourSynth用のビルド
    - name: Install zimg
      env: 
        MSYS2_PATH_TYPE: inherit
      id: zimg-rev
      shell: msys2 {0}
      run: |
        cd ${HOME}
        git clone https://github.com/sekrit-twc/zimg -b v3.0 --depth 1
        cd zimg
        ./autogen.sh
        ./configure --prefix=${HOME}/lsw
        make -j$(nproc)
        make install -j$(nproc)
        
        REVCOUNT=`git rev-list --count HEAD`
        echo "REV_LIST_COUNT=${REVCOUNT}" >> $GITHUB_OUTPUT
        SHA=`git rev-parse HEAD`
        echo "REV_SHA=${SHA}" >> $GITHUB_OUTPUT
        
    - name: Install VapourSynth
      env: 
        MSYS2_PATH_TYPE: inherit
      id: vapoursynth-rev
      shell: msys2 {0}
      run: |
        cd ${HOME}
        git clone https://github.com/vapoursynth/vapoursynth --depth 1
        cd vapoursynth
        ./autogen.sh
        PKG_CONFIG_PATH=${HOME}/lsw/lib/pkgconfig ./configure --host=${{ matrix.cpu_config.cpu }}-w64-mingw32 --disable-vsscript --disable-vspipe --disable-python-module --prefix=${HOME}/lsw
        make -j$(nproc)
        make install -j$(nproc)
        
        REVCOUNT=`git rev-list --count HEAD`
        echo "REV_LIST_COUNT=${REVCOUNT}" >> $GITHUB_OUTPUT
        SHA=`git rev-parse HEAD`
        echo "REV_SHA=${SHA}" >> $GITHUB_OUTPUT

    - name: Build L-SMASH Works(VapourSynth)(meson)
      env: 
        MSYS2_PATH_TYPE: inherit
      shell: msys2 {0}
      run: |
        cd ${HOME}/L-SMASH-Works/VapourSynth
        echo "------------ PATH ------------"
        echo ${PATH}
        echo "------------------------------"
        PKG_CONFIG_PATH=${HOME}/lsw/lib/pkgconfig meson setup --prefer-static build
        ninja -C build



    # BuildInfo File 周り
    - name: Set workflow Revision Info
      env: 
        MSYS2_PATH_TYPE: inherit
      id: workflow-rev
      run: |
        cd ${{ github.workspace }}
        REVCOUNT=`git rev-list --count HEAD`
        echo "REV_LIST_COUNT=${REVCOUNT}" >> $GITHUB_OUTPUT
        SHA=`git rev-parse HEAD`
        echo "REV_SHA=${SHA}" >> $GITHUB_OUTPUT
        
    - name: Create BuildInfo File
      env: 
        MSYS2_PATH_TYPE: inherit
      run: |
        cd ${{ github.workspace }}/L-SMASH-Works
        echo "L-SMASH-Works-Auto-Builds r${{ steps.workflow-rev.outputs.REV_LIST_COUNT }}
        https://github.com/Mr-Ojii/L-SMASH-Works-Auto-Builds
        
        ${{ matrix.lsw_config.author }}/L-SMASH-Works r${{ steps.l-smash-works-rev.outputs.REV_LIST_COUNT }}
        https://github.com/${{ matrix.lsw_config.author }}/L-SMASH-Works
        
        FFmpeg ${{ matrix.lsw_config.ffmpeg_version }}${{ matrix.lsw_config.ffmpeg_patch }}
        https://github.com/FFmpeg/FFmpeg
        
        ${{ matrix.l-smash_author }}/L-SMASH r${{ steps.l-smash-rev.outputs.REV_LIST_COUNT }}
        https://github.com/${{ matrix.l-smash_author }}/l-smash
        
        dav1d ${{ steps.dav1d-rev.outputs.REV_SHA }}
        https://github.com/videolan/dav1d
        
        libvpx ${{ steps.libvpx-rev.outputs.REV_SHA }}
        https://github.com/webmproject/libvpx
        
        nv-codec-headers ${{ steps.nv-codec-headers-rev.outputs.REV_SHA }}
        https://github.com/FFmpeg/nv-codec-headers
        
        zlib ${{ steps.zlib-rev.outputs.REV_SHA }}
        https://github.com/madler/zlib
        
        obuparse ${{ steps.obuparse-rev.outputs.REV_SHA }}
        https://github.com/dwbuiten/obuparse

        game-music-emu ${{ steps.game-music-emu-rev.outputs.REV_SHA }}
        https://github.com/libgme/game-music-emu
        " >> "AviUtl/About-this-build.txt"
        
        if [ "${{ matrix.lsw_config.intel }}" == "mfx" ]; then

        echo "mfx_dispatch ${{ steps.mfx_dispatch-rev.outputs.REV_SHA }}
        https://github.com/lu-zero/mfx_dispatch" >> "AviUtl/About-this-build.txt"

        else

        echo "libvpl ${{ steps.libvpl-rev.outputs.REV_SHA }}
        https://github.com/intel/libvpl" >> "AviUtl/About-this-build.txt"

        fi
    
    - name: Add License Files
      run: |
        mkdir ${{ github.workspace }}/L-SMASH-Works/AviUtl/Licenses
        cd ${{ github.workspace }}/L-SMASH-Works/AviUtl/Licenses
        cp ${{ github.workspace }}/dav1d/COPYING dav1d.txt
        cp ${{ github.workspace }}/l-smash/LICENSE L-SMASH.txt
        cp ${{ github.workspace }}/FFmpeg/COPYING.LGPLv3 FFmpeg.txt
        cp ${{ github.workspace }}/libvpx/LICENSE libvpx.txt
        if [ "${{ matrix.lsw_config.intel }}" == "mfx" ]; then
          cp ${{ github.workspace }}/mfx_dispatch/LICENSE mfx_dispatch.txt
        else
          cp ${{ github.workspace }}/libvpl/LICENSE libvpl.txt
        fi
        echo "[InternetShortcut]" > zlib.url
        echo "URL=https://zlib.net/zlib_license.html" >> zlib.url
        cp ${{ github.workspace }}/obuparse/LICENSE obuparse.txt
        cp ${{ github.workspace }}/game-music-emu/license.txt game-music-emu.txt

    - name: Create RevInfo.txt
      run: |
        cd ${{ github.workspace }}/L-SMASH-Works/AviUtl
        echo ${{ steps.l-smash-works-rev.outputs.REV_LIST_COUNT }} > RevInfo.txt

    # ここからLSWのビルド
    # まずAviUtl用のビルドを行う

    # - name: Install AviSynthPlus
    #   env: 
    #     MSYS2_PATH_TYPE: inherit
    #   id: avisynthplus-rev
    #   shell: msys2 {0}
    #   run: |
    #     cd ${HOME}
    #     git clone https://github.com/AviSynth/AviSynthPlus.git --depth 1 -b v3.7.3
    #     cd AviSynthPlus
    #     # Multiple definitions防止のため、勝手にちょっとだけパッチを当てる
    #     sed -i 's/MSVC/__MINGW32__/' avs_core/filters/AviSource/avi_source.cpp
    #     cmake -S . -B build -DCMAKE_BUILD_TYPE=Release -DENABLE_PLUGINS=OFF -DENABLE_INTEL_SIMD=OFF
    #     cmake --build build -j $(nproc)
    #     cmake --install build --prefix ${HOME}/lsw
        
    #     REVCOUNT=`git rev-list --count HEAD`
    #     echo "REV_LIST_COUNT=${REVCOUNT}" >> $GITHUB_OUTPUT
    #     SHA=`git rev-parse HEAD`
    #     echo "REV_SHA=${SHA}" >> $GITHUB_OUTPUT

    # - name: Build L-SMASH Works(AviSynth)
    #   env: 
    #     MSYS2_PATH_TYPE: inherit
    #   shell: msys2 {0}
    #   run: |
    #     cd ${HOME}/L-SMASH-Works/AviSynth
    #     # ヘッダファイルの階層問題より、AviSynthのヘッダを一つ上の階層にぶちまける
    #     mv ${HOME}/lsw/include/avisynth/* ${HOME}/lsw/include
    #     PKG_CONFIG_PATH=${HOME}/lsw/lib/pkgconfig meson setup --prefer-static build
    #     ninja -C build


    # Releaseのためのディレクトリ
    - name: Create pub Directory
      run: |
        cd ${{ github.workspace }}
        mkdir pub

    # - name: Copy to pub Directory(AviSynth)
    #   run: |
    #     cd ${{ github.workspace }}
    #     mkdir pub/AviSynth && mkdir pub/AviSynth/${{ matrix.cpu_config.user_arch }}
    #     cp L-SMASH-Works/AviSynth/build/*.dll pub/AviSynth/${{ matrix.cpu_config.user_arch }}

    # - name: Copy to pub Directory(VapourSynth)
    #   run: |
    #     cd ${{ github.workspace }}
    #     mkdir pub/VapourSynth && mkdir pub/VapourSynth/${{ matrix.cpu_config.user_arch }}
    #     cp L-SMASH-Works/VapourSynth/build/*.dll pub/VapourSynth/${{ matrix.cpu_config.user_arch }}
        
    - name: Rename Files(x64)
      if: ${{ matrix.cpu_config.user_arch == 'x64' }}
      run: |
        cd ${{ github.workspace }}/L-SMASH-Works/AviUtl
        mv lwinput.aui lwinput64.aui
        mv About-this-build.txt About-this-build-x64.txt
        mv RevInfo.txt RevInfo64.txt

    - name: Copy to pub Directory(AviUtl, x86)
      if: ${{ matrix.cpu_config.user_arch == 'x86' }}
      run: |
        cd ${{ github.workspace }}
        cp ${{ github.workspace }}/L-SMASH-Works/AviUtl/*.auf pub
        cp ${{ github.workspace }}/L-SMASH-Works/AviUtl/*.auc pub
        cp ${{ github.workspace }}/L-SMASH-Works/AviUtl/*.aui pub
        cp ${{ github.workspace }}/L-SMASH-Works/AviUtl/README pub
        cp ${{ github.workspace }}/L-SMASH-Works/AviUtl/README.ja pub
        cp ${{ github.workspace }}/L-SMASH-Works/AviUtl/LICENSE pub
        cp ${{ github.workspace }}/L-SMASH-Works/AviUtl/About-this-build.txt pub
        cp -r ${{ github.workspace }}/L-SMASH-Works/AviUtl/Licenses pub
        cp ${{ github.workspace }}/L-SMASH-Works/AviUtl/RevInfo.txt pub

    - name: Copy to pub Directory(AviUtl, x64)
      if: ${{ matrix.cpu_config.user_arch == 'x64' }}
      run: |
        cd ${{ github.workspace }}
        cp ${{ github.workspace }}/L-SMASH-Works/AviUtl/*.aui pub
        cp ${{ github.workspace }}/L-SMASH-Works/AviUtl/About-this-build-x64.txt pub
        cp ${{ github.workspace }}/L-SMASH-Works/AviUtl/RevInfo64.txt pub
        
    - name: Upload artifact
      uses: actions/upload-artifact@v4
      with:
        name: ${{ matrix.lsw_config.author }}_${{ matrix.l-smash_author }}_${{ matrix.cpu_config.user_arch }}
        path: ${{ github.workspace }}/pub


  # x86とx64のファイルをまとめて1つのzipにするための処理
  create-archive:
    name: Create archive
    needs: build
    runs-on: ubuntu-24.04
    strategy:
      matrix:
        author: [Mr-Ojii]
        l-smash_author: [Mr-Ojii, vimeo]
    steps:
    - uses: actions/checkout@v4
    
    - uses: actions/download-artifact@v4
      with:
        name: ${{ matrix.author }}_${{ matrix.l-smash_author }}_x86
        path: x86

    - uses: actions/download-artifact@v4
      with:
        name: ${{ matrix.author }}_${{ matrix.l-smash_author }}_x64
        path: x64

    - name: Copy Artifacts
      run: |
        cd ${{ github.workspace }}
        mkdir artifacts
        cp -r x86/* artifacts
        cp -r x64/* artifacts
        
    - name: Upload artifact
      uses: actions/upload-artifact@v4
      with:
        name: ${{ matrix.author }}_${{ matrix.l-smash_author }}_Test
        path: ${{ github.workspace }}/artifacts

    - name: Delete test files
      run: |
        cd ${{ github.workspace }}/artifacts
        rm -rf AviSynth
        rm -rf VapourSynth
        
    - name: Set RevInfo
      id: rev-info
      run: |
        cd ${{ github.workspace }}/artifacts
        if [ "$(cat RevInfo.txt)" != "$(cat RevInfo64.txt)" ]; then
          exit 1
        fi
        echo -n "REV=" > Rev.txt
        cat RevInfo.txt >> Rev.txt
        cat Rev.txt >> $GITHUB_OUTPUT
        rm Rev.txt RevInfo.txt RevInfo64.txt
        
    - name: Check diff
      run: |
        cd ${{ github.workspace }}/artifacts
        if [ "$(diff About-this-build.txt About-this-build-x64.txt)" == "" ]; then
          rm About-this-build-x64.txt
        fi
        
    - name: Create archive
      run: |
        cd ${{ github.workspace }}/artifacts
        zip L-SMASH-Works_r${{ steps.rev-info.outputs.REV }}_${{ matrix.author }}_${{ matrix.l-smash_author }} -r *
        
    - uses: actions/upload-artifact@v4
      with:
        name: L-SMASH-Works-${{ matrix.author }}_${{ matrix.l-smash_author }}
        path: ${{ github.workspace }}/artifacts/*.zip

  # Releaseをするための処理
  # create-release:
  #   name: Create release
  #   needs: create-archive
  #   runs-on: ubuntu-24.04
  #   steps:
  #   - uses: actions/checkout@v4
    
  #   - uses: actions/download-artifact@v4
  #     with:
  #       path: artifacts
    
  #   - name: Get Date
  #     id: get_date
  #     run: |
  #       DATE_TIME=`date +'%Y-%m-%d-%H-%M-%S'`
  #       echo "DATE_TIME=${DATE_TIME}" >> $GITHUB_OUTPUT
          
  #   - name: Create a Release
  #     env:
  #       GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  #     run: |
  #       cd ${{ github.workspace }}/artifacts
  #       mv ./*/*.zip ./
  #       RELEASE_NAME=Build-${{ steps.get_date.outputs.DATE_TIME }}
  #       TAG_NAME=build-${{ steps.get_date.outputs.DATE_TIME }}
  #       for asset in *.zip; do
  #         if [[ "$asset" =~ "Mr-Ojii_vimeo" ]]; then
  #           AVIUTL_RECOMMEND_FILE=$asset
  #         fi
  #       done
  #       echo "AviUtl用には\`${AVIUTL_RECOMMEND_FILE}\`をダウンロードすることをお勧めします。" >> ReleaseNotes.txt
  #       echo "また、別バージョンからMr-Ojii版L-SMASH Worksに更新する場合、以下の記事をお読みください。" >> ReleaseNotes.txt
  #       echo "https://scrapbox.io/Mr-Ojii/Mr-Ojii%E7%89%88_L-SMASH_Works%E3%81%AE%E6%9C%80%E6%96%B0%E7%89%88%E3%81%AB%E6%9B%B4%E6%96%B0%E3%81%99%E3%82%8B%E9%9A%9B%E3%81%AE%E6%B3%A8%E6%84%8F%E4%BA%8B%E9%A0%85" >> ReleaseNotes.txt
        
  #       gh release create "${TAG_NAME}" ${{ github.workspace }}/artifacts/*.zip -t "${RELEASE_NAME}" -F ReleaseNotes.txt

  #   - uses: dev-drprasad/delete-older-releases@v0.3.4
  #     with:
  #       keep_latest: 20
  #     env:
  #       GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
