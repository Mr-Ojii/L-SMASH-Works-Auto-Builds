name: Build L-SMASH Works

on:
  push:
    branches:
      - master
  workflow_dispatch:
  schedule:
    - cron: '0 0 * * 0,2,4,6'

jobs:

  build:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        author: [HolyWu, VFR-maniac, Mr-Ojii]
        l-smash_author: [l-smash, Mr-Ojii, vimeo]
        config:
          - { cpu: i686, arch: x86, vpx_target: x86-win32-gcc, user_arch: x86, assets: 'lwcolor.auc lwdumper.auf lwinput.aui lwmuxer.auf' }
          - { cpu: x86_64, arch: x86_64, vpx_target: x86_64-win64-gcc, user_arch: x64, assets: 'lwinput64.aui' }
    
    steps:
    - uses: actions/checkout@v3
      with:
        fetch-depth: 0
      
    - name: Install depend lib
      run: |
        sudo apt-get update -y
        sudo apt-get install -y autoconf libtool nasm mingw-w64 meson ninja-build pkg-config
      
    - name: Create pkg-config symbolic link
      run: sudo ln -s /usr/bin/pkg-config /usr/bin/${{ matrix.config.cpu }}-w64-mingw32-pkg-config
      
    - name: Set git config
      run: |
        git config --global user.name Mr-Ojii
        git config --global user.email okaschan@gmail.com
      
    - name: Install zlib
      run: |
        cd ${{ github.workspace }}
        git clone https://github.com/madler/zlib.git --depth 1
        cd zlib
        CROSS_PREFIX=${{ matrix.config.cpu }}-w64-mingw32- ./configure --static
        make -j$(nproc)
        sudo make install -j$(nproc)
        
    - name: Install dav1d
      run: |
        cd ${{ github.workspace }}
        git clone https://code.videolan.org/videolan/dav1d.git --depth 1
        cd dav1d
        mkdir build && cd build
        meson --cross-file=../package/crossfiles/${{ matrix.config.cpu }}-w64-mingw32.meson --buildtype release --default-library=static ..
        ninja
        sudo ninja install
    
    - name: Install libvpx
      run: |
        cd ${{ github.workspace }}
        git clone https://github.com/webmproject/libvpx.git --depth 1
        mkdir libvpx/builds && cd libvpx/builds
        CROSS=${{ matrix.config.cpu }}-w64-mingw32- ../configure --target=${{ matrix.config.vpx_target }} --enable-vp9-highbitdepth --disable-docs --disable-tools --disable-examples --disable-webm-io --disable-vp8-encoder --disable-vp9-encoder
        make -j$(nproc)
        sudo make install -j$(nproc)
        
    - name: Install nv-codec-headers
      run: |
        cd ${{ github.workspace }}
        git clone https://github.com/FFmpeg/nv-codec-headers.git --depth 1
        cd nv-codec-headers
        sudo make install -j$(nproc)
        
    - name: Install mfx_dispatch
      run: |
        cd ${{ github.workspace }}
        git clone https://github.com/lu-zero/mfx_dispatch.git --depth 1
        cd mfx_dispatch
        autoreconf -i
        ./configure --host=${{ matrix.config.cpu }}-w64-mingw32
        make -j$(nproc)
        sudo make install -j$(nproc)
      
    - name: Install FFmpeg
      run: |
        cd ${{ github.workspace }}
        git clone https://github.com/FFmpeg/FFmpeg.git -b release/4.4
        cd FFmpeg
        git cherry-pick 07bcedc232feeb9e30336624f4e9977d47ac43bc
        ./configure --enable-version3 --enable-avresample --disable-encoders --disable-avisynth --disable-doc --disable-network --disable-programs --disable-outdevs --disable-indevs --disable-avfilter --disable-debug --disable-muxers --enable-avcodec --enable-avformat --enable-swresample --enable-swscale --extra-libs="-lpthread" --cross-prefix=${{ matrix.config.cpu }}-w64-mingw32- --cpu=${{ matrix.config.cpu }} --target-os=mingw32 --arch=${{ matrix.config.arch }} --enable-libdav1d --enable-libvpx --enable-libmfx
        make -j$(nproc)
        sudo make install -j$(nproc)
  
    - name: Install obuparse
      run: |
        cd ${{ github.workspace }}
        git clone https://github.com/dwbuiten/obuparse.git --depth 1
        cd obuparse
        ${{ matrix.config.cpu }}-w64-mingw32-gcc -c obuparse.c
        ${{ matrix.config.cpu }}-w64-mingw32-ar r libobuparse.a obuparse.o
        sudo install obuparse.h /usr/local/include
        sudo install libobuparse.a /usr/local/lib
        
    - name: Install L-SMASH
      run: |
        cd ${{ github.workspace }}
        git clone https://github.com/${{ matrix.l-smash_author }}/l-smash.git
        cd l-smash
        ./configure --cross-prefix=${{ matrix.config.cpu }}-w64-mingw32- --extra-cflags=-I/usr/local/include --extra-ldflags=-L/usr/local/lib
        make lib -j$(nproc)
        sudo make install-lib -j$(nproc)
        
    - name: Build L-SMASH Works
      run: |
        cd ${{ github.workspace }}
        git clone https://github.com/${{ matrix.author }}/L-SMASH-Works.git
        cd L-SMASH-Works/AviUtl
        ./configure --cross-prefix=${{ matrix.config.cpu }}-w64-mingw32- --extra-cflags=-I/usr/local/include --extra-ldflags="-L/usr/local/lib -static-libgcc -static-libstdc++ -static" --extra-libs="-lpthread"
        make -j$(nproc)


    - name: Set workflow Revision Info
      id: workflow-rev
      run: |
        cd ${{ github.workspace }}
        REVCOUNT=`git rev-list --count HEAD`
        echo "REV_LIST_COUNT=${REVCOUNT}" >> $GITHUB_OUTPUT
        SHA=`git rev-parse HEAD`
        echo "REV_SHA=${SHA}" >> $GITHUB_OUTPUT
              
    - name: Set zlib Revision Info
      id: zlib-rev
      run: |
        cd ${{ github.workspace }}/zlib
        REVCOUNT=`git rev-list --count HEAD`
        echo "REV_LIST_COUNT=${REVCOUNT}" >> $GITHUB_OUTPUT
        SHA=`git rev-parse HEAD`
        echo "REV_SHA=${SHA}" >> $GITHUB_OUTPUT
        
    - name: Set dav1d Revision Info
      id: dav1d-rev
      run: |
        cd ${{ github.workspace }}/dav1d
        REVCOUNT=`git rev-list --count HEAD`
        echo "REV_LIST_COUNT=${REVCOUNT}" >> $GITHUB_OUTPUT
        SHA=`git rev-parse HEAD`
        echo "REV_SHA=${SHA}" >> $GITHUB_OUTPUT
        
    - name: Set libvpx Revision Info
      id: libvpx-rev
      run: |
        cd ${{ github.workspace }}/libvpx
        REVCOUNT=`git rev-list --count HEAD`
        echo "REV_LIST_COUNT=${REVCOUNT}" >> $GITHUB_OUTPUT
        SHA=`git rev-parse HEAD`
        echo "REV_SHA=${SHA}" >> $GITHUB_OUTPUT
        
    - name: Set nv-codec-headers Revision Info
      id: nv-codec-headers-rev
      run: |
        cd ${{ github.workspace }}/nv-codec-headers
        REVCOUNT=`git rev-list --count HEAD`
        echo "REV_LIST_COUNT=${REVCOUNT}" >> $GITHUB_OUTPUT
        SHA=`git rev-parse HEAD`
        echo "REV_SHA=${SHA}" >> $GITHUB_OUTPUT
        
    - name: Set mfx_dispatch Revision Info
      id: mfx_dispatch-rev
      run: |
        cd ${{ github.workspace }}/mfx_dispatch
        REVCOUNT=`git rev-list --count HEAD`
        echo "REV_LIST_COUNT=${REVCOUNT}" >> $GITHUB_OUTPUT
        SHA=`git rev-parse HEAD`
        echo "REV_SHA=${SHA}" >> $GITHUB_OUTPUT
        
    - name: Set obuparse Revision Info
      id: obuparse-rev
      run: |
        cd ${{ github.workspace }}/obuparse
        REVCOUNT=`git rev-list --count HEAD`
        echo "REV_LIST_COUNT=${REVCOUNT}" >> $GITHUB_OUTPUT
        SHA=`git rev-parse HEAD`
        echo "REV_SHA=${SHA}" >> $GITHUB_OUTPUT
        
    - name: Set L-SMASH Revision Info
      id: l-smash-rev
      run: |
        cd ${{ github.workspace }}/l-smash
        REVCOUNT=`git rev-list --count HEAD`
        echo "REV_LIST_COUNT=${REVCOUNT}" >> $GITHUB_OUTPUT
        SHA=`git rev-parse HEAD`
        echo "REV_SHA=${SHA}" >> $GITHUB_OUTPUT
        
    - name: Set L-SMASH Works Revision Info
      id: l-smash-works-rev
      run: |
        cd ${{ github.workspace }}/L-SMASH-Works
        REVCOUNT=`git rev-list --count HEAD`
        echo "REV_LIST_COUNT=${REVCOUNT}" >> $GITHUB_OUTPUT
        SHA=`git rev-parse HEAD`
        echo "REV_SHA=${SHA}" >> $GITHUB_OUTPUT
        
        
    - name: Create BuildInfo File
      run: |
        cd ${{ github.workspace }}/L-SMASH-Works
        echo "L-SMASH-Works-Auto-Builds r${{ steps.workflow-rev.outputs.REV_LIST_COUNT }}" >> "AviUtl/About-this-build.txt"
        echo "https://github.com/Mr-Ojii/L-SMASH-Works-Auto-Builds" >> "AviUtl/About-this-build.txt"
        echo "" >> "AviUtl/About-this-build.txt"
        echo "${{ matrix.author }}/L-SMASH-Works r${{ steps.l-smash-works-rev.outputs.REV_LIST_COUNT }}" >> "AviUtl/About-this-build.txt"
        echo "https://github.com/${{ matrix.author }}/L-SMASH-Works" >> "AviUtl/About-this-build.txt"
        echo "" >> "AviUtl/About-this-build.txt"
        echo "FFmpeg 4.4 (patched)" >> "AviUtl/About-this-build.txt"
        echo "https://github.com/FFmpeg/FFmpeg" >> "AviUtl/About-this-build.txt"
        echo "" >> "AviUtl/About-this-build.txt"
        echo "${{ matrix.l-smash_author }}/L-SMASH r${{ steps.l-smash-rev.outputs.REV_LIST_COUNT }}" >> "AviUtl/About-this-build.txt"
        echo "https://github.com/${{ matrix.l-smash_author }}/l-smash" >> "AviUtl/About-this-build.txt"
        echo "" >> "AviUtl/About-this-build.txt"
        echo "dav1d ${{ steps.dav1d-rev.outputs.REV_SHA }}" >> "AviUtl/About-this-build.txt" 
        echo "https://github.com/videolan/dav1d" >> "AviUtl/About-this-build.txt"
        echo "" >> "AviUtl/About-this-build.txt"
        echo "libvpx ${{ steps.libvpx-rev.outputs.REV_SHA }}" >> "AviUtl/About-this-build.txt"
        echo "https://github.com/webmproject/libvpx" >> "AviUtl/About-this-build.txt"
        echo "" >> "AviUtl/About-this-build.txt"
        echo "nv-codec-headers ${{ steps.nv-codec-headers-rev.outputs.REV_SHA }}" >> "AviUtl/About-this-build.txt"
        echo "https://github.com/FFmpeg/nv-codec-headers" >> "AviUtl/About-this-build.txt"
        echo "" >> "AviUtl/About-this-build.txt"
        echo "mfx_dispatch ${{ steps.mfx_dispatch-rev.outputs.REV_SHA }}" >> "AviUtl/About-this-build.txt"
        echo "https://github.com/lu-zero/mfx_dispatch" >> "AviUtl/About-this-build.txt"
        echo "" >> "AviUtl/About-this-build.txt"
        echo "zlib ${{ steps.zlib-rev.outputs.REV_SHA }}" >> "AviUtl/About-this-build.txt"
        echo "https://github.com/madler/zlib" >> "AviUtl/About-this-build.txt"
        echo "obuparse ${{ steps.obuparse-rev.outputs.REV_SHA }}" >> "AviUtl/About-this-build.txt"
        echo "https://github.com/dwbuiten/obuparse" >> "AviUtl/About-this-build.txt"
    
    - name: Add License Files
      run: |
        mkdir ${{ github.workspace }}/L-SMASH-Works/AviUtl/Licenses
        cd ${{ github.workspace }}/L-SMASH-Works/AviUtl/Licenses
        cp ${{ github.workspace }}/dav1d/COPYING dav1d.txt
        cp ${{ github.workspace }}/l-smash/LICENSE L-SMASH.txt
        cp ${{ github.workspace }}/FFmpeg/COPYING.LGPLv3 FFmpeg.txt
        cp ${{ github.workspace }}/libvpx/LICENSE libvpx.txt
        cp ${{ github.workspace }}/mfx_dispatch/LICENSE mfx_dispatch.txt
        echo "[InternetShortcut]" > zlib.url
        echo "URL=https://zlib.net/zlib_license.html" >> zlib.url
        cp ${{ github.workspace }}/obuparse/LICENSE obuparse.txt
        
    - name: Create RevInfo.txt
      run: |
        cd ${{ github.workspace }}/L-SMASH-Works/AviUtl
        echo ${{ steps.l-smash-works-rev.outputs.REV_LIST_COUNT }} > RevInfo.txt
        
    - name: Rename Files(x64)
      if: ${{ matrix.config.user_arch == 'x64' }}
      run: |
        cd ${{ github.workspace }}/L-SMASH-Works/AviUtl
        mv lwinput.aui lwinput64.aui
        mv About-this-build.txt About-this-build-x64.txt
        mv RevInfo.txt RevInfo64.txt
          
    - name: Upload artifact(x86)
      uses: actions/upload-artifact@v3
      if: ${{ matrix.config.user_arch == 'x86' }}
      with:
        name: ${{ matrix.author }}_${{ matrix.l-smash_author }}
        path: |
          ${{ github.workspace }}/L-SMASH-Works/AviUtl/*.auf
          ${{ github.workspace }}/L-SMASH-Works/AviUtl/*.auc
          ${{ github.workspace }}/L-SMASH-Works/AviUtl/*.aui
          ${{ github.workspace }}/L-SMASH-Works/AviUtl/README
          ${{ github.workspace }}/L-SMASH-Works/AviUtl/README.ja
          ${{ github.workspace }}/L-SMASH-Works/AviUtl/LICENSE
          ${{ github.workspace }}/L-SMASH-Works/AviUtl/About-this-build.txt
          ${{ github.workspace }}/L-SMASH-Works/AviUtl/Licenses
          ${{ github.workspace }}/L-SMASH-Works/AviUtl/RevInfo.txt
          
          
    - name: Upload artifact(x64)
      uses: actions/upload-artifact@v3
      if: ${{ matrix.config.user_arch == 'x64' }}
      with:
        name: ${{ matrix.author }}_${{ matrix.l-smash_author }}
        path: |
          ${{ github.workspace }}/L-SMASH-Works/AviUtl/*.aui
          ${{ github.workspace }}/L-SMASH-Works/AviUtl/About-this-build-x64.txt
          ${{ github.workspace }}/L-SMASH-Works/AviUtl/RevInfo64.txt
        
        
  create-archive:
    name: Create archive
    needs: build
    runs-on: ubuntu-latest
    strategy:
      matrix:
        author: [HolyWu, VFR-maniac, Mr-Ojii]
        l-smash_author: [l-smash, Mr-Ojii, vimeo]
    steps:
    - uses: actions/checkout@v3
    
    - uses: actions/download-artifact@v3
      with:
        name: ${{ matrix.author }}_${{ matrix.l-smash_author }}
        path: artifacts
        
    - name: Set RevInfo
      id: rev-info
      run: |
        cd ${{ github.workspace }}/artifacts
        if [ "$(cat RevInfo.txt)" != "$(cat RevInfo64.txt)" ]; then
          exit 1
        fi
        echo -n "REV=" > Rev.txt
        cat RevInfo.txt >> Rev.txt
        cat Rev.txt >> $GITHUB_OUTPUT
        rm Rev.txt RevInfo.txt RevInfo64.txt
        
        
    - name: Create archive
      run: |
        cd ${{ github.workspace }}/artifacts
        zip L-SMASH-Works_r${{ steps.rev-info.outputs.REV }}_${{ matrix.author }}_${{ matrix.l-smash_author }}_AviUtl -r *
        
    - uses: actions/upload-artifact@v3
      with:
        name: L-SMASH-Works
        path: ${{ github.workspace }}/artifacts/*.zip


  create-release:
    name: Create release
    needs: create-archive
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3
    
    - uses: actions/download-artifact@v3
      with:
        name: L-SMASH-Works
        path: artifacts
    
    - name: Get Date
      id: get_date
      run: |
        DATE_TIME=`date +'%Y-%m-%d-%H-%M-%S'`
        echo "DATE_TIME=${DATE_TIME}" >> $GITHUB_OUTPUT
    # https://gist.github.com/superbrothers/af84a2f8af394a62352e06537a640746        
    - name: Create a Release
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        cd ${{ github.workspace }}/artifacts
        RELEASE_NAME=Build-${{ steps.get_date.outputs.DATE_TIME }}
        TAG_NAME=build-${{ steps.get_date.outputs.DATE_TIME }}
        assets=()
        for asset in ${{ github.workspace }}/artifacts/*.zip; do
          assets+=("-a" "$asset")
        done
        for asset in *.zip; do
          if [[ "$asset" =~ "Mr-Ojii_Mr-Ojii_AviUtl" ]]; then
            AVIUTL_RECOMMEND_FILE=$asset
          fi
        done
        hub release create "${assets[@]}" -m "$RELEASE_NAME" -m "AviUtl用には\`$AVIUTL_RECOMMEND_FILE\`をダウンロードすることをお勧めします。" -m "また、別バージョンからMr-Ojii版L-SMASH Worksに更新する場合、以下の記事をお読みください。" -m "https://scrapbox.io/Mr-Ojii/Mr-Ojii%E7%89%88_L-SMASH_Works%E3%81%AE%E6%9C%80%E6%96%B0%E7%89%88%E3%81%AB%E6%9B%B4%E6%96%B0%E3%81%99%E3%82%8B%E9%9A%9B%E3%81%AE%E6%B3%A8%E6%84%8F%E4%BA%8B%E9%A0%85" "$TAG_NAME"

    - uses: dev-drprasad/delete-older-releases@v0.2.1
      with:
        keep_latest: 20
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
